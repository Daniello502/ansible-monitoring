# roles/grafana/tasks/main.yml

---
# Use include_vars to load necessary variables dynamically during the play
# These tasks are needed because standard group_vars loading seems unreliable in this environment.

- name: Include all variables for Grafana tasks
  ansible.builtin.include_vars:
    # Use the correct relative path based on your inventory structure
    file: "../../../inventory/group_vars/all.yml"
  # No when condition here

# Include OS-specific variables based on OS family
- name: Include RedHat specific variables for Grafana tasks
  ansible.builtin.include_vars:
    # Use the correct relative path based on your inventory structure
    file: "../../../inventory/group_vars/centos_servers.yml"
  when: ansible_os_family == "RedHat"

- name: Include Debian specific variables for Grafana tasks
  ansible.builtin.include_vars:
    # Use the correct relative path based on your inventory structure
    file: "../../../inventory/group_vars/ubuntu_servers.yml"
  when: ansible_os_family == "Debian"

# --- Tasks for adding Grafana repository (OS-specific) ---

# Ensure Grafana repository GPG key is added on CentOS/RHEL
- name: Ensure Grafana repository GPG key is added on CentOS/RHEL
  ansible.builtin.rpm_key: # Add the GPG key first
    state: present
    key: "{{ grafana_repo_gpgkey_centos }}" # Use GPG key URL from all.yml
  when: ansible_os_family == "RedHat"

# Ensure Grafana repository is added on CentOS/RHEL
- name: Ensure Grafana repository is added on CentOS/RHEL
  ansible.builtin.yum_repository:
    name: "grafana"
    description: "Grafana repository"
    baseurl: "{{ grafana_rpm_repo_baseurl }}" # Use the corrected baseurl variable from all.yml
    gpgcheck: yes # Keep gpgcheck yes
    enabled: yes
    state: present
  when: ansible_os_family == "RedHat"

# Ensure Grafana repository GPG key is added on Ubuntu/Debian
- name: Ensure Grafana repository GPG key is added on Ubuntu/Debian
  ansible.builtin.apt_key: # Add the GPG key securely
    url: "{{ grafana_repo_gpgkey_ubuntu }}"
    state: present
    keyring: /usr/share/keyrings/grafana.gpg # Recommended path for modern apt
  when: ansible_os_family == "Debian"

# Ensure Grafana repository is added on Ubuntu/Debian
- name: Ensure Grafana repository is added on Ubuntu/Debian
  ansible.builtin.apt_repository:
    # Correct repo string format: baseurl, then 'stable', then 'main'
    repo: "deb [signed-by=/usr/share/keyrings/grafana.gpg] {{ grafana_apt_repo_baseurl }} stable main"
    # Removed the duplicate state: line
    state: present # Ensure the state is explicitly present
    filename: grafana
    update_cache: yes
  when: ansible_os_family == "Debian"

# --- Task for installing Grafana package ---

# Ensure Grafana package is installed (uses OS-specific package manager)
- name: Ensure Grafana package is installed
  ansible.builtin.package:
    name: grafana # The package name is usually 'grafana' on both
    state: present
  # This task will run on both OS families where the role is applied.
  # The package module automatically uses yum/dnf or apt based on facts.

# --- Tasks for managing Grafana service ---

# Ensure Grafana service is running and enabled
- name: Ensure Grafana service is running and enabled
  ansible.builtin.systemd:
    name: grafana-server # Service name is typically 'grafana-server'
    state: started
    enabled: yes
    daemon_reload: yes

# --- Tasks for configuring firewall for Grafana web port (OS-specific) ---

# Ensure firewall allows traffic to Grafana web port (iptables)
- name: Ensure firewall allows traffic to Grafana web port (iptables)
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "{{ grafana_web_port }}" # <-- Use Grafana web port variable
    jump: ACCEPT
    state: present
    comment: "Allow Grafana web traffic"
  when: ansible_os_family == "RedHat"

- name: Ensure firewall allows traffic to Grafana web port (UFW)
  ansible.builtin.command: "{{ firewall_cmd }} allow {{ grafana_web_port }}/tcp"
  when:
    - ansible_os_family == "Debian"
    - firewall_cmd == "ufw"
  # No notify needed here unless we add a handler to reload firewalls

# --- Tasks for configuring Prometheus Data Source in Grafana ---

# Grafana allows configuring data sources via a configuration file provisioned
# in a specific directory.

- name: Ensure Grafana data source provisioning directory exists
  ansible.builtin.file:
    path: /etc/grafana/provisioning/datasources
    state: directory
    owner: root # Owned by root, Grafana process reads it
    group: grafana # Grafana group can read
    mode: '0750' # Ensure appropriate permissions

- name: Ensure Prometheus data source configuration is in place
  ansible.builtin.template:
    src: "prometheus_datasource.yml.j2" # <-- Template file in roles/grafana/templates/
    dest: "/etc/grafana/provisioning/datasources/prometheus.yml" # Standard provisioning path
    owner: root
    group: grafana
    mode: '0640' # Ensure appropriate permissions
  notify: Restart grafana-server # Restart Grafana to pick up new data source config

# Handlers for Grafana service (Restart only for now, reload less common for config)
# These are defined in roles/grafana/handlers/main.yml
