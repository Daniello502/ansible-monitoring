# roles/common/tasks/main.yml

---
# Use include_vars to load necessary variables dynamically during the play
# Using an absolute path to ensure reliable loading regardless of execution context.

- name: Include all variables for common tasks
  ansible.builtin.include_vars:
    # Use the absolute path to your group_vars/all.yml file on the Ansible Controller
    file: "/home/ansible/ansible-monitoring/ansible-monitoring-project/inventory/group_vars/all.yml" # <-- REPLACE WITH YOUR ACTUAL ABSOLUTE PATH
  # No when condition here

# Include OS-specific variables based on OS family
- name: Include RedHat specific variables for common tasks
  ansible.builtin.include_vars:
    # Use the absolute path to your group_vars/centos_servers.yml file
    file: "/home/ansible/ansible-monitoring/ansible-monitoring-project/inventory/group_vars/centos_servers.yml" # <-- REPLACE WITH YOUR ACTUAL ABSOLUTE PATH
  when: ansible_os_family == "RedHat"

# Include Debian specific variables based on OS family
- name: Include Debian specific variables for common tasks
  ansible.builtin.include_vars:
    # Use the absolute path to your group_vars/ubuntu_servers.yml file
    file: "/home/ansible/ansible-monitoring/ansible-monitoring-project/inventory/group_vars/ubuntu_servers.yml" # <-- REPLACE WITH YOUR ACTUAL ABSOLUTE PATH
  when: ansible_os_family == "Debian"

# --- Tasks for package installation (OS-specific) ---

# Ensure required system packages are installed on CentOS/RHEL, ignoring the grafana repo
# This is needed because the grafana repo might be inaccessible on CentOS hosts,
# blocking package manager operations by default.
- name: Ensure required system packages are installed on CentOS/RHEL
  ansible.builtin.yum: # Use the yum module for more control over repositories
    name: "{{ common_packages }}" # <-- CHANGED: Use the defined common_packages variable
    state: present
    disablerepo: "grafana" # <-- Tell yum to ignore the 'grafana' repo for this operation
    update_cache: true # Ensure metadata is updated from reachable repos
  when: ansible_os_family == "RedHat" # Only run on RedHat-based systems

# Ensure required system packages are installed on Ubuntu/Debian
- name: Ensure required system packages are installed on Ubuntu/Debian
  ansible.builtin.apt: # Use the apt module for more control
    name: "{{ common_packages }}" # <-- CHANGED: Use the defined common_packages variable
    state: present
    update_cache: true # Ensure metadata is updated
  when: ansible_os_family == "Debian" # Only run on Debian-based systems

# Ensure gnupg is installed on Ubuntu/Debian for apt_key module (redundant with system_base_packages, can remove later)
# Keeping this for now until we confirm system_base_packages works
- name: Ensure gnupg is installed on Ubuntu/Debian (redundant)
  ansible.builtin.apt:
    name: gnupg # Package providing the 'gpg' command
    state: present
  when: ansible_os_family == "Debian"

# --- Optional Debug Task ---

# Debug common package installation result (Optional)
- name: Debug common package installation result (Optional)
  ansible.builtin.debug:
    var: install_common_packages_result # <-- Print the whole registered variable
  # Note: The register variable 'install_common_packages_result' was from the old 'package' task.
  # You might need to adjust this debug task if you want to register the output
  # of the new yum/apt tasks instead. For now, it will likely skip or fail.
  when: install_common_packages_result is defined and install_common_packages_result is changed # Only show debug if something happened

# --- Tasks for firewall service management (OS-specific) ---

# Ensure firewalld is stopped and disabled on CentOS (if switching to iptables)
# This prevents conflicts if iptables is being used instead.
- name: Ensure firewalld is stopped and disabled on CentOS
  ansible.builtin.systemd:
    name: firewalld
    state: stopped # Ensure it's stopped
    enabled: no    # Ensure it doesn't start on boot
  when: ansible_os_family == "RedHat"
  ignore_errors: yes # Ignore if firewalld wasn't even installed/running

# Ensure iptables and ip6tables services are running and enabled on CentOS
# These are needed if iptables is the chosen firewall for RedHat systems.
- name: Ensure iptables services are running and enabled on CentOS
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop:
    - iptables
    - ip6tables
  when: ansible_os_family == "RedHat"
  ignore_errors: yes  # Added: Some systems might not have these services installed

# --- Tasks for common firewall rules ---

# Ensure firewall allows traffic to SSH port (iptables)
- name: Ensure firewall allows traffic to SSH port (iptables)
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 22 # SSH port
    jump: ACCEPT
    state: present
    comment: "Allow SSH traffic"
  when: ansible_os_family == "RedHat"

# Ensure firewall allows traffic to SSH port (UFW) using the ufw module
- name: Ensure firewall allows traffic to SSH port (UFW)
  community.general.ufw: # <-- Using the ufw module
    rule: allow
    port: 22
    proto: tcp
    state: enabled # Ensure the rule is enabled
  when: ansible_os_family == "Debian"

# Ensure firewall allows traffic to TTYD port (iptables)
- name: Ensure firewall allows traffic to TTYD port (iptables)
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 7681 # TTYD port
    jump: ACCEPT
    state: present
    comment: "Allow TTYD traffic"
  when: ansible_os_family == "RedHat"

# Ensure firewall allows traffic to TTYD port (UFW) using the ufw module
- name: Ensure firewall allows traffic to TTYD port (UFW)
  community.general.ufw: # <-- Using the ufw module
    rule: allow
    port: 7681
    proto: tcp
    state: enabled # Ensure the rule is enabled
  when: ansible_os_family == "Debian"

# --- Tasks for creating node_exporter user and group ---

# Ensure the 'node_exporter' group exists
- name: Ensure the 'node_exporter' group exists
  ansible.builtin.group:
    name: "{{ node_exporter_group }}" # <-- Uses the node_exporter_group variable
    state: present
  register: create_group_result # Optional: register the output

# Ensure the 'node_exporter' user exists
- name: Ensure the 'node_exporter' user exists
  ansible.builtin.user:
    name: "{{ node_exporter_user }}" # <-- Uses the node_exporter_user variable
    group: "{{ node_exporter_group }}" # <-- Uses the node_exporter_group variable
    system: yes # Create as a system user
    shell: "{{ node_exporter_shell }}" # <-- Uses the OS-specific node_exporter_shell (e.g., /usr/sbin/nologin)
    create_home: no # Node exporter runs without a home directory
    state: present
  register: create_user_result # Optional: register the output